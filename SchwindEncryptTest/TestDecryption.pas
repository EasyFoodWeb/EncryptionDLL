unit TestDecryption;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, vcl.Dialogs, DECCipherModes, Decryption, System.SysUtils,
  DECFormatBase, Helper, System.Classes, DECCipherBase;

type
  // Test methods for class TClassDecryption

  TestTClassDecryption = class(TTestCase)
  strict private
    FClassDecryption: TClassDecryption;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestDecrypt128Bit;
    procedure TestDecrypt192Bit;
    procedure TestDecrypt256Bit;
    procedure TestDecryptFile;
    procedure TestDecryptFilePDF;
    procedure TestDecryptFileZIP;
  end;

implementation

procedure TestTClassDecryption.SetUp;
begin
  FClassDecryption := TClassDecryption.Create;
end;

procedure TestTClassDecryption.TearDown;
begin
  FClassDecryption.Free;
  FClassDecryption := nil;
end;

procedure TestTClassDecryption.TestDecrypt128Bit;
var
  ReturnValue: Integer;
  mode: Integer;
  secretkey: string;
  destination: string;
  source: string;
begin
  source := 'C:\Users\AA Computers\Documents\Schwind_Library\SchwindEncryptTest\TestSamples\EncryptMsg128.schwind';
  destination := 'C:\Users\AA Computers\Documents\Schwind_Library\SchwindEncryptTest\TestSamples\DecryptMsg128.txt';
  secretkey := 'C:\Users\AA Computers\Documents\Schwind_Library\SchwindEncryptTest\TestSamples\password128bit.txt';

  ReturnValue := FClassDecryption.Decrypt(source, destination, secretkey, mode);

  Check(ReturnValue = 0, 'Error # ' + GetExceptionMessage(ReturnValue));
end;

procedure TestTClassDecryption.TestDecrypt192Bit;
var
  ReturnValue: Integer;
  mode: Integer;
  secretkey: string;
  destination: string;
  source: string;
begin
  source := 'C:\Users\AA Computers\Documents\Schwind_Library\SchwindEncryptTest\TestSamples\EncryptMsg192.schwind';
  destination := 'C:\Users\AA Computers\Documents\Schwind_Library\SchwindEncryptTest\TestSamples\DecryptMsg192.txt';
  secretkey := 'C:\Users\AA Computers\Documents\Schwind_Library\SchwindEncryptTest\TestSamples\password192bit.txt';

  ReturnValue := FClassDecryption.Decrypt(source, destination, secretkey, mode);

  Check(ReturnValue = 0, 'Error # ' + GetExceptionMessage(ReturnValue));
end;

procedure TestTClassDecryption.TestDecrypt256Bit;
var
  ReturnValue: Integer;
  mode: Integer;
  secretkey: string;
  destination: string;
  source: string;
begin
  source := 'C:\Users\AA Computers\Documents\Schwind_Library\SchwindEncryptTest\TestSamples\EncryptMsg256.schwind';
  destination := 'C:\Users\AA Computers\Documents\Schwind_Library\SchwindEncryptTest\TestSamples\DecryptMsg256.txt';
  secretkey := 'C:\Users\AA Computers\Documents\Schwind_Library\SchwindEncryptTest\TestSamples\password256bit.txt';

  ReturnValue := FClassDecryption.Decrypt(source, destination, secretkey, mode);

  Check(ReturnValue = 0, 'Error # ' + GetExceptionMessage(ReturnValue));
end;

procedure TestTClassDecryption.TestDecryptFile;
var
  ReturnValue: Integer;
  mode: Integer;
  secretkey: string;
  destination: string;
  source: string;
begin
  source := '..\..\TestSamples\Research(Cryptographic Algorithms & Available Libraries).schwind';
  destination := '..\..\TestSamples\Research-DE.docx';
  secretkey := '..\..\TestSamples\password256bit.txt';

  ReturnValue := FClassDecryption.DecryptFile(source, destination, secretkey, mode);

  Check(ReturnValue = 0, 'Error # ' + GetExceptionMessage(ReturnValue));
end;

procedure TestTClassDecryption.TestDecryptFilePDF;
var
  ReturnValue: Integer;
  mode: Integer;
  secretkey: string;
  destination: string;
  source: string;
begin
  source := '..\..\TestSamples\final Syllabus of Economic Development.schwind';
  destination := '..\..\TestSamples\final Syllabus of Economic Development-DE.pdf';
  secretkey := '..\..\TestSamples\password256bit.txt';

  ReturnValue := FClassDecryption.DecryptFile(source, destination, secretkey, mode);

  Check(ReturnValue = 0, 'Error # ' + GetExceptionMessage(ReturnValue));
end;

procedure TestTClassDecryption.TestDecryptFileZIP;
var
  ReturnValue: Integer;
  mode: Integer;
  secretkey: string;
  destination: string;
  source: string;
begin
  source := '..\..\TestSamples\Schwind_Library-main.schwind';
  destination := '..\..\TestSamples\Schwind_Library-main-DE.Zip';
  secretkey := '..\..\TestSamples\password256bit.txt';

  ReturnValue := FClassDecryption.DecryptFile(source, destination, secretkey, mode);

  Check(ReturnValue = 0, 'Error # ' + GetExceptionMessage(ReturnValue));
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTClassDecryption.Suite);
end.

